'use client';

import { useState } from 'react';
import Link from 'next/link';
import Layout from './Layout';

interface ExamplePrompt {
  label: string;
  prompt: string;
}

interface VulnerabilityConfig {
  vulnerableSystemPrompt: string;
  secureSystemPrompt: string;
  maxTokens?: number;
  temperature?: number;
}

interface VulnerabilityDemoProps {
  id: string;
  title: string;
  description: string;
  examplePrompts: ExamplePrompt[];
  config: VulnerabilityConfig;
  explanation: {
    vulnerability: string;
    defense: string;
  };
}

export default function VulnerabilityDemo({
  id,
  title,
  description,
  examplePrompts,
  config,
  explanation,
}: VulnerabilityDemoProps) {
  const [prompt, setPrompt] = useState('');
  const [response, setResponse] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [defenseEnabled, setDefenseEnabled] = useState(true);
  const [showSystemPrompt, setShowSystemPrompt] = useState(true);
  const [lastStatus, setLastStatus] = useState<'vulnerable' | 'blocked' | 'mitigated' | null>(null);

  // Navigation logic
  const vulnerabilities = [
    { id: 'LLM01', path: '/llm01' },
    { id: 'LLM02', path: '/llm02' },
    { id: 'LLM03', path: '/llm03' },
    { id: 'LLM04', path: '/llm04' },
    { id: 'LLM05', path: '/llm05' },
    { id: 'LLM06', path: '/llm06' },
    { id: 'LLM07', path: '/llm07' },
    { id: 'LLM08', path: '/llm08' },
    { id: 'LLM09', path: '/llm09' },
    { id: 'LLM10', path: '/llm10' },
  ];

  const currentIndex = vulnerabilities.findIndex(vuln => vuln.id === id);
  const previousVuln = currentIndex > 0 ? vulnerabilities[currentIndex - 1] : null;
  const nextVuln = currentIndex < vulnerabilities.length - 1 ? vulnerabilities[currentIndex + 1] : null;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim() || isLoading) return;

    setIsLoading(true);
    setResponse('');
    setLastStatus(null);

    try {
      const systemPrompt = defenseEnabled 
        ? config.secureSystemPrompt 
        : config.vulnerableSystemPrompt;

      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: prompt,
          systemPrompt,
          maxTokens: config.maxTokens || 1000,
          temperature: config.temperature || 0.7,
          vulnerabilityType: id,
          defenseEnabled,
        }),
      });

      const data = await res.json();

      if (data.error) {
        setResponse(`Error: ${data.error}`);
        setLastStatus('blocked');
      } else {
        setResponse(data.response);
        
        // Simple heuristic to determine status
        if (defenseEnabled) {
          setLastStatus('mitigated');
        } else {
          // Check if response shows signs of vulnerability
          const responseText = data.response.toLowerCase();
          if (responseText.includes('i cannot') || 
              responseText.includes('i can\'t') || 
              responseText.includes('sorry') ||
              responseText.includes('not appropriate')) {
            setLastStatus('blocked');
          } else {
            setLastStatus('vulnerable');
          }
        }
      }
    } catch {
      setResponse('Failed to send request. Please check your API key configuration.');
      setLastStatus('blocked');
    } finally {
      setIsLoading(false);
    }
  };

  const getStatusIndicator = () => {
    switch (lastStatus) {
      case 'vulnerable':
        return <span className="text-red-600">Vulnerable ‚úÖ</span>;
      case 'blocked':
        return <span className="text-blue-600">Blocked üõ°Ô∏è</span>;
      case 'mitigated':
        return <span className="text-yellow-600">Mitigated ‚ö†Ô∏è</span>;
      default:
        return null;
    }
  };

  const getOWASPLink = () => {
    const links: Record<string, string> = {
      'LLM01': 'https://genai.owasp.org/llmrisk/llm01-prompt-injection/',
      'LLM02': 'https://genai.owasp.org/llmrisk/llm022025-sensitive-information-disclosure/',
      'LLM03': 'https://genai.owasp.org/llmrisk/llm032025-supply-chain/',
      'LLM04': 'https://genai.owasp.org/llmrisk/llm042025-data-and-model-poisoning/',
      'LLM05': 'https://genai.owasp.org/llmrisk/llm052025-improper-output-handling/',
      'LLM06': 'https://genai.owasp.org/llmrisk/llm062025-excessive-agency/',
      'LLM07': 'https://genai.owasp.org/llmrisk/llm072025-system-prompt-leakage/',
      'LLM08': 'https://genai.owasp.org/llmrisk/llm082025-vector-and-embedding-weaknesses/',
      'LLM09': 'https://genai.owasp.org/llmrisk/llm092025-misinformation/',
      'LLM10': 'https://genai.owasp.org/llmrisk/llm102025-unbounded-consumption/',
    };
    return links[id] || 'https://genai.owasp.org/llmrisk/';
  };

  return (
    <Layout>
      <div className="max-w-4xl mx-auto p-6">
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold mb-4">{id}: {title}</h1>
          <p className="text-lg text-gray-700 mb-4">{description}</p>
          <a
            href={getOWASPLink()}
            target="_blank"
            rel="noopener noreferrer"
            className="inline-flex items-center px-4 py-2 text-sm text-blue-600 border border-blue-600 rounded hover:bg-blue-50 transition-colors"
          >
            üìñ View OWASP Official Documentation
          </a>
        </div>

        {/* Example Prompts */}
        <div className="mb-6">
          <h3 className="text-xl font-bold mb-3">Try These Example Prompts:</h3>
          <p className="text-sm text-gray-600 mb-3">Click any example below to load it into the input field, then customize and send:</p>
          <div className="space-y-2">
            {examplePrompts.map((example, index) => (
              <button
                key={index}
                onClick={() => setPrompt(example.prompt)}
                className="block w-full text-left p-3 border border-gray-300 rounded hover:bg-blue-50 hover:border-blue-400 transition-colors"
              >
                <div className="font-semibold text-sm mb-1 text-blue-700">{example.label}</div>
                <div className="text-sm text-gray-600 font-mono">{example.prompt}</div>
                <div className="text-xs text-blue-600 mt-1">‚Üë Click to try this prompt</div>
              </button>
            ))}
          </div>
        </div>

        {/* Input Form */}
        <form onSubmit={handleSubmit} className="mb-6">
          <div className="mb-4">
            <label htmlFor="prompt" className="block text-lg font-semibold mb-2">
              Your Prompt:
            </label>
            <textarea
              id="prompt"
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              className="w-full p-3 border-2 border-gray-300 rounded font-mono text-sm h-32 resize-y"
              placeholder="Type your prompt here, or click an example above to load it..."
            />
          </div>
          
          {/* Defense Toggle and Send Button Row */}
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex items-center gap-6">
              {/* Defense Toggle */}
              <label className="flex items-center text-lg">
                <input
                  type="checkbox"
                  checked={defenseEnabled}
                  onChange={(e) => setDefenseEnabled(e.target.checked)}
                  className="mr-3 w-5 h-5"
                />
                Defense {defenseEnabled ? 'ON' : 'OFF'}
              </label>
              
              {/* Status Indicator */}
              {lastStatus && (
                <div className="text-sm">
                  <strong>Status: </strong>{getStatusIndicator()}
                </div>
              )}
            </div>
            
            <button
              type="submit"
              disabled={isLoading || !prompt.trim()}
              className="px-6 py-3 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
              {isLoading ? 'Sending...' : 'Send Prompt'}
            </button>
          </div>
        </form>

        {/* Response */}
        {response && (
          <div className="mb-6">
            <h3 className="text-xl font-bold mb-3">LLM Response:</h3>
            <div className="p-4 bg-gray-100 rounded border font-mono text-sm whitespace-pre-wrap">
              {response}
            </div>
          </div>
        )}

        {/* System Prompt Display */}
        <div className="mb-6">
          <button
            onClick={() => setShowSystemPrompt(!showSystemPrompt)}
            className="text-blue-600 hover:text-blue-800 underline"
          >
            {showSystemPrompt ? 'Hide' : 'Show'} System Prompt
          </button>
          
          {showSystemPrompt && (
            <div className="mt-3 p-4 bg-gray-100 rounded border">
              <h4 className="font-bold mb-2">
                Current System Prompt ({defenseEnabled ? 'Secure' : 'Vulnerable'}):
              </h4>
              <div className="font-mono text-sm whitespace-pre-wrap">
                {defenseEnabled ? config.secureSystemPrompt : config.vulnerableSystemPrompt}
              </div>
            </div>
          )}
        </div>

        {/* Explanations */}
        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <div className="p-4 border rounded">
            <h3 className="text-lg font-bold mb-3 text-red-600">How the Vulnerability Works:</h3>
            <p className="text-sm">{explanation.vulnerability}</p>
          </div>
          
          <div className="p-4 border rounded">
            <h3 className="text-lg font-bold mb-3 text-green-600">How the Defense Works:</h3>
            <p className="text-sm">{explanation.defense}</p>
          </div>
        </div>

        {/* Navigation */}
        <div className="border-t pt-6 mt-8">
          <div className="flex justify-between items-center">
            {/* Previous Button */}
            <div className="flex-1">
              {previousVuln ? (
                <Link
                  href={previousVuln.path}
                  className="inline-flex items-center px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors"
                >
                  ‚Üê Previous ({previousVuln.id})
                </Link>
              ) : (
                <div></div>
              )}
            </div>

            {/* Home Button */}
            <div className="flex-1 text-center">
              <Link
                href="/"
                className="inline-flex items-center px-6 py-2 bg-gray-800 text-white rounded hover:bg-gray-900 transition-colors"
              >
                ‚Üë Home
              </Link>
            </div>

            {/* Next Button */}
            <div className="flex-1 text-right">
              {nextVuln ? (
                <Link
                  href={nextVuln.path}
                  className="inline-flex items-center px-4 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors"
                >
                  Next ({nextVuln.id}) ‚Üí
                </Link>
              ) : (
                <div></div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}